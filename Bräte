# ROBO ADVISOR FOR STOCKS BASED ON MARKOV CHAIN
# -----------------------------------------------------------------------------
# We need to describe every function in the code:
    # What is the input?
    # What is the output?
    # Why do we need the function?
    # When do we need the function?
# -----------------------------------------------------------------------------
import os
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import time
cwd = os.getcwd()
cwd
os.chdir("/Users/nickzumbuhl/Documents/1_University/MiQE:F/1. Semester/Theory of Finance/ProblemSets/PS1")
#------------------------------------------------------------------------------
# Importing Data
#------------------------------------------------------------------------------
file = 'DataFinal.xlsx'
xl = pd.ExcelFile(file)
df1 = xl.parse('DATA')          # verschiedene Sheets f√ºr unterschiedlichen Zeithorizont
data = df1.as_matrix(columns=None)
#------------------------------------------------------------------------------
# Collection of Functions Used:
#------------------------------------------------------------------------------
def Return_of_Asset(x):             # Return of Asset
    Returns = []
    for i in range(0,len(x)-1):
        Returns.append((x[i+1]/x[i])-1)
    return Returns

def Return_of_Matrix(x):            # Return of the Data-Matrix
    Return_Matrix = []
    Return = []
    for i in range(0, len(x[1,:])):
        Return_Matrix = np.c_[Return_of_Asset(x[:,i])]
        Return.append(Return_Matrix)
    return Return

def MarkovChain(K, states):         # Markov Chain
    numb_inputs = len(K)-1
    turn_out_matrix = [[0 for x in range(states)] for x in range(states)]
    prob_matrix = [[0 for x in range(states)] for x in range(states)]
    row = [0, 0, 0, 0, 0, 0]
    t=0
    while t<numb_inputs:
        turn_out_matrix[K[t]][K[t+1]]+=1
        t+=1

    for i in range(0, 6):           # calculate the total of each row transistions
        for j in range(0, 6):
            row[i]+=turn_out_matrix[i][j]

    for i in range(0, 6):           # calculate the probability of every transition
        for j in range(0, 6):
            prob_matrix[i][j] = turn_out_matrix[i][j]/float(row[i])
    return np.matrix(prob_matrix)

def State_Transformation(x, quant1):
    q1= np.percentile(x,quant1)
    q2= np.percentile(x,25)
    q3= np.percentile(x,50)
    q4= np.percentile(x,75)
    q5= np.percentile(x,100-quant1)
    Jeb = []                          
    for j in range(0,len(x)):
        if x[j] > q5:
            Jeb.append(5)
        elif x[j] > q4:
            Jeb.append(4)
        elif x[j] > q3:
            Jeb.append(3)
        elif x[j] > q2:
            Jeb.append(2)
        elif x[j] > q1:
            Jeb.append(1)
        else:
            Jeb.append(0)
    return Jeb

def Prob_High_S_Tplus1(D, inp):     # Prob[S_{t+1} in {6,5,4} | S_{t} = 1]
    K = Return_of_Matrix(D)
    x = K[inp]
    TRX = []
    for i in range(1,11):
        Jeb = State_Transformation(x,i)
        F = MarkovChain(Jeb,6)
        l = 0
        for k in range(3,6):
            l = l + F[0,k]
        TRX.append(l)
    return TRX

def Prob_Low_S_Tplus1(D, inp):      # Prob[S_{t+1} in {1,2,3} | S_{t} = 6]
    K = Return_of_Matrix(D)
    x = K[inp]
    TRX = []
    for i in range(1,11):
        Jeb = State_Transformation(x,i)
        F = MarkovChain(Jeb,6)
        n = 0
        for r in range(0,3):
            n = n + F[5,r]
        TRX.append(n)
    return TRX

def Crit_Title_Low(x):                          # Critical State for "LOW"?
    K = Return_of_Matrix(x)
    Low = []
    for i in range(0,len(data[1,:])):
        if K[i][-1] < np.nanpercentile(K, 5):   # quantile has to be defined here
            Low.append(1)
        else:
            Low.append(0)
    return Low

def Crit_Title_High(x):              # Is there a critical state "High" 
    K = Return_of_Matrix(x)
    High = []
    for i in range(0,len(data[1,:])):
        if K[i][-1] > np.nanpercentile(K, 90):  # quantile has to be definded
            High.append(1)
        else:
            High.append(0)
    return High

def count_critical_statesH(x):      # How many critical States for "Low"?
    sum = 0
    CRIT = Crit_Title_High(x);
    for i in range(0,len(data[1,:])):
        if CRIT[i] == 1:
            sum = sum + 1
        else:
            sum = sum
    return sum

def count_critical_statesL(x):      # How many critical States for "High"?
    sum = 0
    CRIT = Crit_Title_Low(x);
    for i in range(0,len(data[1,:])):
        if CRIT[i] == 1:
            sum = sum + 1
        else:
            sum = sum
    return sum

def Detecting_Position(x):
    Position = []
    for i in range(0,len(data[1,:])):
        if x[i] == 1:
            Position.append(i)
        else:
            Position = Position
    return Position

def Basic_Values(D, Numb, quant1):
    R_Data = Return_of_Matrix(D)
    Title = R_Data[Numb]
    State_Mat = State_Transformation(Title, quant1)
    return State_Mat

def Historical_Prob(D, Numb, quant1):
    value = Basic_Values(D, Numb, quant1)
    Pro_Mat = MarkovChain(value, 6)
    return Pro_Mat

def Graph(D, inp):
    zerofive = []
    for i in range(1,11):
        zerofive.append(0.5)
    fig,ax = plt.subplots()
    ax.plot(range(1,11), Prob_High_S_Tplus1(D, inp), label='Prob[S_{t+1} in {6,5,4} | S_{t} = 1]',
                         marker='o', color = 'g', alpha=0.8)
    ax.plot(range(1,11), Prob_Low_S_Tplus1(D, inp), label='Prob[S_{t+1} in {1,2,3} | S_{t} = 6]',
                        marker='o', color = 'r', alpha=0.8)
    ax.plot(range(1,11), zerofive, label='50% Probability', color='grey',alpha = 0.5)
    ax.legend(loc='upper right')
    plt.xlabel('Quantiles in %')
    plt.ylabel('Probabilty')
    fff = plt.show()
    return fff

def Trading_Advice(x):    # Add Probability-Indicator!
    print("\033[0;37;48mThe following assets were detected in the data:                     ")
    print("")
    print("->  Long Position in Asset(s): " , Detecting_Position(Crit_Title_High(x)))
    print("")
    print("\033[0;37;48m->  Short Position in Asset(s):" , Detecting_Position(Crit_Title_Low(x)))

# ******************************************************************************************************************************
# INTERACTIVE SECTION
# ******************************************************************************************************************************
# Introduction to the Code
print("")
print("\033[3;32;33m___________________________________________________________________________") # \033[3;32;33m = bordeaux rot
print("***************************************************************************")
print("___________________________________________________________________________")
print("")
print("                   Software Engineering for Economists  \n")
print("___________________________________________________________________________")
print("")
print("\033[0;34;48m                       By Samuel, Ray, Sergio and Nick")                  # \033[0;34;48m = Blue
print("")
print("\033[0;37;48mThe purpose of this code is to find patterns in different assets classes, \n" # \033[0;37;48m = Grau
      "such as stocks, commodities and currencies. The goal is to figure out whether \n"
      "it is possible to predict investment patterns by using a Markov Chain\n"
      "algorithm.\n"
      "In addition, the code is also able to give some basic investment advice \n"
      "and hence, can be seen as a very basic robo advisor")
# time.sleep(3)
print("")
question = input("\033[0;34;48mPress 'Enter' to proceed:                     " )
print("")
print("\033[3;32;33m___________________________________________________________________________")
# ******************************************************************************************************************************
# BRANCH
print("\033[0;37;48mDo you want to proceed with a single title or with a market prediction?")
print("For single asset analysis type 'Analysis'; For market analysis type 'Market' ")
question2 = input("\033[0;34;48mType 'Analysis' or 'Market'                    ")
print("")
# ******************************************************************************************************************************
if question2 == "Market":
    print("\033[3;32;33m___________________________________________________________________________")
    print("")
    print("\033[0;37;48mThis part is aiming to detect assets which are currently in one of the \n"
                "critical states. That is, either in state one or state six. This section  \n"
                "should be seen as a trading advice, as it workes through the given data in \n"
                "order to scan for critical states.")
    print("")
    print(Trading_Advice(data))
    time.sleep(2)
    print("\033[0;34;48mDo you want to proceed with Asset analysis?")
    question4 = input("\033[0;34;48mType 'YES' or 'NO'                                   ")
    if question4 == "YES":
        print("\033[3;32;33m___________________________________________________________________________")
        print("")
        print("\033[0;37;48mThe stock titles backed in this programme are following:\n"
          "1 = ABB ; 2 = C; ...; ")
        print("")
        print("\033[0;37;48mPlease choose the Stock by typing the corresponding number:")
        print("Number has to be between 0 and ", len(data[0,:]))
        number = int(input("\033[0;34;48mAsset:                                               "))
        qq1  = int(input("\033[0;34;48mQuantile 1 (Suggested value is 5):                   " ))
        print("\033[3;32;33m___________________________________________________________________________")
        print("")
        print("\033[0;37;48mThe following matrix will show the state transformation probability. That\n"
                    "is the probability that it changes from state one today to another state\n"
                    "tomorrow. The matrix value [m][n] represents the probability that the state\n"
                    "changes from [m] today, to state [n] tomorrow")
        question5 = input("\033[0;34;48mPress 'Enter' to proceed:                    " )
        print("\033[3;32;33m___________________________________________________________________________")
        print("\033[0;37;48m")
        print(Historical_Prob(data,number, qq1))        # Muss noch sch√∂n Visualisiert werden
        print("")
        print("In addition to that, a graph is generated which shows the probability for a\n"
              "state transformation from one of the extreme states to the opposite 50 \n"
              "percent quantile.")
        question6 = input("\033[0;34;48mPress 'Enter' to proceed:                    " )
        print("\033[3;32;33m___________________________________________________________________________")
        print("")
        print(Graph(data,number))
        print("\033[3;32;33m___________________________________________________________________________")
        print("")
        print("\033[0;34;48mDo you want to proceed with another title?")
        Q1 = input("\033[0;34;48mType: 'YES' or 'NO'                                 ")
        while Q1 == "YES":
            inin =  int(input("\033[0;34;48mAsset:                                                "))
            qqq1  = int(input("\033[0;34;48mQuantile 1 (Suggested value is 5):                    " ))
            print("\033[3;32;33m___________________________________________________________________________")
            print("")
            print("\033[0;37;48mThe following matrix will show the state transformation probability. That\n"
                    "is the probability that it changes from state one today to another state\n"
                    "tomorrow. The matrix value [m][n] represents the probability that the state\n"
                    "changes from [m] today, to state [n] tomorrow")
            question10 = input("\033[0;34;48mPress 'Enter' to proceed:                    " )
            print("\033[3;32;33m___________________________________________________________________________")
            print("\033[0;37;48m")
            print(Historical_Prob(data,inin, qqq1))
            print("")
            print("In addition to that, a graph is generated which shows the probability for a\n"
              "state transformation from one of the extreme states to the opposite 50 \n"
              "percent quantile.")
            question11 = input("\033[0;34;48mPress 'Enter' to proceed:                    " )
            print("\033[3;32;33m___________________________________________________________________________")
            print("")
            print(Graph(data,inin))
            print("\033[0;34;48mDo you want to proceed with another asset?" )
            Q1 = input("\033[0;34;48mType: 'YES' or 'NO'                                 ")
            print("\033[3;32;33m___________________________________________________________________________")
    else:
        print("Code Finished")
else:
    print("\033[3;32;33m___________________________________________________________________________")
    print("")
    print("\033[0;37;48mThe stock titles backed in this programme are following:\n"
      "1 = ABB ; 2 = C; ...; ")
    print("")
    print("\033[0;37;48mPlease choose the Stock by typing the corresponding number:")
    print("Number has to be between 0 and ", len(data[0,:]))
    number = int(input("\033[0;34;48mAsset:                                               "))
    qq1  = int(input("\033[0;34;48mQuantile 1 (Suggested value is 5):                   " ))
    print("\033[3;32;33m___________________________________________________________________________")
    print("")
    print("\033[0;37;48mThe following matrix will show the state transformation probability. That\n"
                "is the probability that it changes from state one today to another state\n"
                "tomorrow. The matrix value [m][n] represents the probability that the state\n"
                "changes from [m] today, to state [n] tomorrow")
    question51 = input("\033[0;34;48mPress 'Enter' to proceed:                    " )
    print("\033[3;32;33m___________________________________________________________________________")
    print("\033[0;37;48m")
    print(Historical_Prob(data,number, qq1))        # Muss noch sch√∂n Visualisiert werden
    print("")
    print("In addition to that, a graph is generated which shows the probability for a\n"
          "state transformation from one of the extreme states to the opposite 50 \n"
          "percent quantile.")
    question61 = input("\033[0;34;48mPress 'Enter' to proceed:                    " )
    print("\033[3;32;33m___________________________________________________________________________")
    print("")
    print(Graph(data,number))
    print("\033[3;32;33m___________________________________________________________________________")
    print("")
    print("\033[0;34;48mDo you want to proceed with another title?")
    Q2 = input("\033[0;34;48mType: 'YES' or 'NO'                                 ")
    while Q2 == "YES":
        inin =  int(input("\033[0;34;48mAsset:                                                "))
        qqq1  = int(input("\033[0;34;48mQuantile 1 (Suggested value is 5):                    " ))
        print("\033[3;32;33m___________________________________________________________________________")
        print("")
        print("\033[0;37;48mThe following matrix will show the state transformation probability. That\n"
                "is the probability that it changes from state one today to another state\n"
                "tomorrow. The matrix value [m][n] represents the probability that the state\n"
                "changes from [m] today, to state [n] tomorrow")
        question10 = input("\033[0;34;48mPress 'Enter' to proceed:                    " )
        print("\033[3;32;33m___________________________________________________________________________")
        print("\033[0;37;48m")
        print(Historical_Prob(data,inin, qqq1))
        print("")
        print("In addition to that, a graph is generated which shows the probability for a\n"
              "state transformation from one of the extreme states to the opposite 50 \n"
              "percent quantile.")
        question11 = input("\033[0;34;48mPress 'Enter' to proceed:                    " )
        print("\033[3;32;33m___________________________________________________________________________")
        print("")
        print(Graph(data,inin))
        print("\033[0;34;48mDo you want to proceed with another asset?" )
        Q2 = input("\033[0;34;48mType: 'YES' or 'NO'                                 ")
        print("\033[3;32;33m___________________________________________________________________________")
    print("")
    print("\033[0;37;48mHave you seen enough? We can offer you a market overview based on the titels\n"
          "backed in the data. Please choose whether to proceed or not, by typing\n"
          "'YES' or 'NO' (Note: If you type 'NO', the programme is finished) ")
    question3 = input("\033[0;34;48mType 'YES' or 'NO':                          ")
    if question3 == "YES":
        print("\033[3;32;33m___________________________________________________________________________")
        print("")
        print("\033[0;37;48mThis part is aiming to detect assets which are currently in one of the \n"
                    "critical states. That is, either in state one or state six. This section  \n"
                    "should be seen as a trading advice, as it workes through the given data in \n"
                    "order to scan for critical states.")
        print("")
        print(Trading_Advice(data))
    else:
        print("Code finished")



# END
